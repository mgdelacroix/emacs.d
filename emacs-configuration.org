#+TITLE: Emacs configuration

* Cask

  First of all, load the =cask.el= file and initialize the module.

  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el :padline no :mkdirp yes
    (add-to-list 'load-path user-emacs-directory)
    
    (require 'cask "~/.cask/cask.el")
    (cask-initialize)
  #+END_SRC

* Encryption with PGP                                                 :crypt:
-----BEGIN PGP MESSAGE-----
Version: GnuPG v2.0.22 (GNU/Linux)

hQIOA50twMi6CP1pEAf+LKDc9pep5oCM09fj44RE9gwM+HPgnoi8Jb+QFK1JJivm
gyqs9W1VMGsRnL3t4T12aeNKMX6MxxrJaeVP/MmjSg1eyIvOpwQP2THMjozXeGDn
XIFChTqzTL1nL5Dvugc1VecES+ESnaomGRFz1S+MSCgLQfcHpMb0kpla3fJMXw2X
NcrA1w/fqQ5JiFHlG7854dm5YugwR9DdB9AOmdo0WgNFcMv42/ThzCql1/9V29Mz
lB7dkT9L8Z4KgWKaHCCvpdcNljZHXFWbSd+7Dch/EToL1JVZBVOe03Y/uTG4cGC3
TkhvOj2z0EatRaqlvs/80vFTnj/1F7v594R/IXxL0AgAjjKTb+a2wpEezGt4EaCm
gLDGJZuWDYWHYiBu5FvqcO5JD/TildurNgC9bzIkOSXp+G0aa9V/h4VMbWUws7tR
asS4zDekbM1tyzN8YCK6HVhECL14mczr3wed0zDdkeilrIyV5Lsdd2l45SOd6HTC
8A9LDTx3m+JmgaxQai/M801Vz7vc1n1F96sXzkTZxgjpGoM1KoGrClVnYar4Z+GP
a15FtvY3zHImCbPfBz4gycGickOoscz4CThkxEZN/cvrljrzhTta79unlBOh7pEa
EO0Yi5DMJc9G8ipyGy8DATVIUuoSTcg6oCrRx1FkVA7gZ38F7eel0fU1KqPUZA2p
LtLAlAFOhHaqMGkdPht+qKIKgeQaUoiLbNSbRaIbDR08l8L3AfmlXQ/HfHjRqRj1
2W/qTNzDnhJNoxBr6roCz+0qHofc3JHJyBPjdJs/tStAGkif9vUtWrVgPj7SeDX1
P5ZsIRcIaWQ1C9PDat6vfsIJDppA0jyx9Ia3tu5l1sMsmFPER/8BynBCFe+Ukk5r
x0I0QHrcWIW1of2iewGi9BpgLY8B7miNiTRGU092B2BJ9py67ZtTSILLSCdGlBHW
wie0t1LFbTjEP4DE5TaF6/kDbjEmDpI/lOOUyMH1+SmFF4pmioToJcB1w5SmDnOX
I+Cxwj0mFzzqPrias0OMmMsXjS/0I8cMmQp7dOsP47PtySXSINE5foNZf2ce75DI
BC6sdG8mGpIgiw/a3DYthckXCpKw8ddpgvjRseD+TfjknYqXMG0bWgzehXowDSZH
7NkLjJzfU1Y=
=ENuW
-----END PGP MESSAGE-----

* Misc customizations

  Deactivate all the toolbars and menus
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (menu-bar-mode 0)
    (tool-bar-mode 0)
    (scroll-bar-mode 0)
  #+END_SRC

  Column number
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (setq column-number-mode t)
  #+END_SRC

  Rayas en la franja izquierda cuando no hay más líneas en el buffer
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (toggle-indicate-empty-lines)
    (fringe-mode '(4 . 0))
  #+END_SRC

  We want to delete selected stuff when writting
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (delete-selection-mode)
  #+END_SRC

  Limit words depending on camel-case
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (global-subword-mode)
  #+END_SRC

  Basic indentation
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (setq-default c-basic-offset 4)
  #+END_SRC

  Tabs configuration
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (setq-default indent-tabs-mode nil)
    (setq-default tab-width 4)  
  #+END_SRC

  Deactivate splash screen
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (setq inhibit-splash-screen t)
  #+END_SRC

  Theme
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (load-theme 'cyberpunk t)
  #+END_SRC

  Auto revert buffers when they change
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (setq global-auto-revert-mode t)
    (setq global-auto-revert-non-file-buffers t)
    (setq auto-revert-verbose nil)
  #+END_SRC

* Programming customizations

  Ido-mode
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (setq ido-enable-flex-matching t)
    (setq ido-everywhere t)
    (ido-mode 1)
    (require 'ido-ubiquitous)
    (ido-at-point-mode)
  #+END_SRC

  SmartParens
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (smartparens-global-mode)
  #+END_SRC

  yasnippets
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (require 'yasnippet)
    (yas-global-mode)
    
    (add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets")
  #+END_SRC

  Load and initialize plugins
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (require 'expand-region)
    (require 'multiple-cursors)
    (require 'smex)
    (smex-initialize)
    (ido-vertical-mode)
    (projectile-global-mode)
    (global-git-gutter-mode +1)
  #+END_SRC

  ace-jump-mode
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (require 'ace-jump-mode)
  #+END_SRC

  pretty mode
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (require 'pretty-mode)
    (global-pretty-mode)
  #+END_SRC

** Groovy customizations

   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     (add-to-list 'auto-mode-alist '("\\.groovy\\'" . groovy-mode))
     (add-to-list 'auto-mode-alist '("\\.gsp\\'" . nxml-mode))
     (add-to-list 'auto-mode-alist '("\\.gradle$" . groovy-mode))
   #+END_SRC

** Emacs LISP customizations

   Rainbow mode
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     (add-hook 'emacs-lisp-mode-hook 'rainbow-delimiters-mode)
   #+END_SRC

* ERC customizations

  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (setq erc-default-server "localhost")
  #+END_SRC

* Org customizations

  Agenda customizations
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (load-library "find-lisp")
    (setq org-agenda-files (find-lisp-find-files "~/org" "\.org$"))  
  #+END_SRC

  Associate org-mode with =.org= files
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
  #+END_SRC

  Activate auto-fill-mode in org files
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (add-hook 'org-mode-hook 'auto-fill-mode)
  #+END_SRC

* Slime customizations

  Setting the REPL command
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (setq inferior-lisp-program "clisp")
  #+END_SRC

* Multi-term customizations

  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (setq multi-term-program "/usr/bin/zsh")
    
    (setq term-bind-key-alist
          (list
           (cons "C-c C-j" 'term-line-mode)
           (cons "C-c C-k" 'term-char-mode)
           (cons "C-c C-c" 'term-interrupt-subjob)
           (cons "C-c C-z" 'term-stop-subjob)
           (cons "M-b" 'term-send-backward-word)))
  #+END_SRC

* Custom functions

** smart-beginning-of-line

   This function will be bound to =C-a=.
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     ; smart-beginning-of-line
     (defun smart-beginning-of-line ()
       "Move point to first non-whitespace character or beginning-of-line.
     
     Move point to the first non-whitespace character on this line.
     If point was already at that position, move point to beginning of line."
       (interactive)
       (let ((oldpos (point)))
         (back-to-indentation)
         (and (= oldpos (point))
              (beginning-of-line))))
   #+END_SRC

* Key bindings

  avoid sending emacs to sleep with C-z.
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (global-unset-key (kbd "C-z"))
  #+END_SRC

  If sleeping, emacs can be awekened with =SIGCONT=
  #+BEGIN_SRC shell-script
    killall -CONT emacs
    killall -CONT emacsclient
  #+END_SRC

  use smex with M-x
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (global-set-key (kbd "M-x") 'smex)
    (global-set-key (kbd "M-X") 'smex-major-mode-commands)  
  #+END_SRC

  ibuffer with the default buffer list
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (global-set-key (kbd "C-x C-b") 'ibuffer)
  #+END_SRC

  smart-beginning-of-line
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (global-set-key (kbd "C-a") 'smart-beginning-of-line)  
  #+END_SRC

  org-mode
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (global-set-key (kbd "C-c c") 'org-capture)
    (global-set-key (kbd "C-c a") 'org-agenda)
  #+END_SRC

  expand-region
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (global-set-key "\M-@" 'er/expand-region)
    (global-set-key "\M-#" 'er/contract-region)  
  #+END_SRC

  multiple-cursors
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (global-set-key (kbd "C->") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
    (global-set-key (kbd "C-M->") 'mc/skip-to-next-like-this)
    (global-set-key (kbd "C-M-<") 'mc/skip-to-previous-like-this)  
  #+END_SRC

  programming
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (global-set-key (kbd "C-c C-c") 'comment-or-uncomment-region)  
  #+END_SRC

  magit
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (global-set-key (kbd "C-c m") 'magit-status)  
  #+END_SRC

  ace-jump-mode
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (global-set-key (kbd "C-c SPC") 'ace-jump-mode)
  #+END_SRC

** Chords

   First we need to activate =key-chord-mode=
   #+BEGIN_SRC emacs-lisp
     (require 'key-chord)
     (key-chord-mode 1)
   #+END_SRC

   Then we can define as many chords as we want:

   *window resize*
   #+BEGIN_SRC emacs-lisp
     (key-chord-define-global "rh" 'shrink-window-horizontally)
     (key-chord-define-global "rl" 'enlarge-window-horizontally)
     (key-chord-define-global "rj" 'shrink-window)
     (key-chord-define-global "rk" 'enlarge-window)
   #+END_SRC

* Auto-save and backup configuration

  auto-save
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (setq backup-directory-alist
          `((".*" . ,temporary-file-directory)))
    (setq auto-save-file-name-transforms
          `((".*" ,temporary-file-directory t)))  
  #+END_SRC

  backup
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (setq backup-directory-alist `(("." . "~/.saves")))
  #+END_SRC
