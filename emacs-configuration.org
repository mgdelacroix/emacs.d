#+TITLE: Emacs configuration

* Cask

  First of all, load the =cask.el= file and initialize the module.

  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el :padline no :mkdirp yes
    (add-to-list 'load-path user-emacs-directory)

    (require 'cask "~/.cask/cask.el")
    (cask-initialize)
  #+END_SRC

* Crypto

  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el :padline no :mkdirp yes
    (require 'epa-file)
  #+END_SRC

* Nyan mode

  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el :padline no :mkdirp yes
    (setq nyan-mode t)
    (setq scroll-bar-mode 1)
  #+END_SRC

* Misc customizations

  Occur binding
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (global-set-key (kbd "M-o") 'occur)
  #+END_SRC

  Disable transient mark mode
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (setq transient-mark-mode nil)
  #+END_SRC

  Deactivate all the toolbars and menus
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (menu-bar-mode 0)
    (tool-bar-mode 0)
    (scroll-bar-mode 0)
  #+END_SRC

  Column number
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (setq column-number-mode t)
  #+END_SRC

  Rayas en la franja izquierda cuando no hay más líneas en el buffer
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (toggle-indicate-empty-lines)
    (fringe-mode '(4 . 0))
  #+END_SRC

  We want to delete selected stuff when writting
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (delete-selection-mode)
  #+END_SRC

  Limit words depending on camel-case
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (global-subword-mode)
  #+END_SRC

  Basic indentation
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (setq-default c-basic-offset 4)
  #+END_SRC

  Tabs configuration
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (setq-default indent-tabs-mode nil)
    (setq-default tab-width 4)
  #+END_SRC

  Deactivate splash screen
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (setq inhibit-splash-screen t)
  #+END_SRC

  Font
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (set-default-font "Fantasque Sans Mono")
    (add-to-list 'default-frame-alist
                 '(font . "Fantasque Sans Mono-13"))
  #+END_SRC

  Theme
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (load-theme 'seti t)
  #+END_SRC

  Auto revert buffers when they change
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (global-auto-revert-mode)
    (setq auto-revert-verbose nil)
  #+END_SRC

  Force case matching when using /dabbrev-expand/
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (setq dabbrev-case-fold-search nil)
  #+END_SRC

* Discover

  Activate discover mode
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (require 'discover)
    (global-discover-mode 1)
  #+END_SRC

* guide-key

  Activate and configure guide-key mode
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (require 'guide-key)
    (setq guide-key/guide-key-sequence '("C-x r" "C-x 4" "C-x v"))
    (guide-key-mode 1)
  #+END_SRC

* Mail with mu4e

** Configuration

   Misc customizations
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     ;; Customizations
     (setq mu4e-confirm-quit nil)

     ;; Appearance
     (setq mu4e-use-fancy-chars t)

     ;; Show images
     (setq mu4e-view-show-images t)
     (when (fboundp 'imagemagick-register-types)
       (imagemagick-register-types))
   #+END_SRC

   Mail retrieval
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     (setq mu4e-update-interval 120)
   #+END_SRC

   Kill buffer on exit
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
      (setq message-kill-buffer-on-exit t)
   #+END_SRC

* Mail with gnus

-----BEGIN PGP MESSAGE-----
Version: GnuPG v1

hQIMAzYGEZlLyGYfAQ/+KiLKSBNKRal7QEU61m1lThgBEMgspdf7j5UfSqvzWe84
m2XeSoIfE8D2MKNFdFTiDxMMCkx1N4+wlo24a+dRP6kPHrTjKFoYUStMuISG26Nq
lzgwPopU65wBOACKSK/DMkHBtOvrJpsQhQUp11qGoIMmOnBNlTX2YxUnURMubLUi
fwxPFoSqIgjEHaa+U9tlEEXJFvz020hC1hhsuL2oDYo9lW15fdUlMYMy1L98WSkR
rPxX/9Ndwif/vJEBG+etqd2yLHImzoZ0swFvji1OoKOLBGKVae2EdwN/StAt4ii9
6XnWLuY3l3ZRNIa60Z07or+/uKsKV345b3r9NMREF4GmGvKUmPhgZNmsmVA6oK21
qrfmI+JZsXxm4Re2AHONJdU/6cLhGp/kH/KlpnT2E9Yutgh0yFV2C38KEEV+BW2K
olca84if8xENe8bia2sjgTY2t9b1zgvBV8Pog5ypnpJmG7yVR2rP/JqKziKQJz8U
j1AutPf2F5wPGMmtyduBmha8I7jBvRsXckG2yjwVOTHGO3o3DvSJ4nszV49+tiDj
BIAfX14avOys43nzNBZlc68eWH1YQnANYzKmeE27RxSMkb8h0JU07ubeNlnJrCjR
qwGl7XRk4eSPSr0L0H/Dxr/sEZ7wXw9SPD0hBDKgDSiYnKavn3Y7Ku14xNzlU/TS
6QHzNk+eQxcO+C4dSLEWPuL1Pbww6CFH6W2wr05F4ruEzsPA6o+Jw2DCe7WHa7tL
HCSMlgMRq1QoAnHb0hqNTTMl8kqHS9lrhgz830he20rxRNlRAGDxHoaq7ls7rjfG
0MEZ5Me/eUNRBttRp0gdw1jKtpd23QWcpqHX+5iuNKIUaWQg7J+UddH0ju8b/1oI
e51t2RcdkEKnyN4W3V+WlxkYBIGKh2AgIuQVrwHE8bbdtBFKRZr3NBvjxYKGSEbw
wV80Ozz804umcDZWXKViRcOrbry6bf0OKUielp5KjAyULTVBkE8DPg2/4eJaBJ03
8TXqpORHcBZS72149RCNu6cKrIfP+YLNktsBd2FPfe9qO4gxt5+SzfOcKNKGJU8p
DgxQA4p/5+CsyNJEfGhICpo+pMUIprkbZgkJytH5/ze5AkpBSeQgL0nKovMhwU8Z
0qJxtaIYVjTlVO9FlfFWVYPmqsCIjbZnQu9IhzJOu0usjoitludJtOhrh8/psCrZ
Rwzd5W9e9Ytm41UynbAzkAzfETC0HVXVpMo7auEH+aljYtb0519piRbsZAQ1n2Hx
d8IzRvDKPFm4H92vBrt8aqKFiWfbbK5my3k9Y5WnrfEeMRdut+VBV51OwnZRSg83
3ulSROjyZKzg/3Eq+OSw5d4WDEIcel8BVxrMfiv2zCumEZ6WY0cxEYeKQxgcReVg
k2Vu
=lZIO
-----END PGP MESSAGE-----

* BBDB

  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (require 'bbdb)
    (bbdb-initialize 'gnus 'message 'sc 'w3)
  #+END_SRC

* Edit server

  Load =edit-server=
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (require 'edit-server)
  #+END_SRC

  Avoid opening a new frame when editing
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (setq edit-server-new-frame nil)
  #+END_SRC

  Start edit server
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (edit-server-start)
  #+END_SRC

* Programming customizations

  Delete trailing whitespace before saving a file
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (setq delete-trailing-lines t)
    (add-hook 'before-save-hook 'delete-trailing-whitespace)
  #+END_SRC

  Ido-mode
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (setq ido-enable-flex-matching t)
    (setq ido-everywhere t)
    (ido-mode 1)
    (require 'ido-ubiquitous)
    (ido-at-point-mode)
  #+END_SRC

  SmartParens
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (smartparens-global-mode)
    ; disable parens content highlight
    (setq sp-highlight-pair-overlay nil)
  #+END_SRC

  yasnippets
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (require 'yasnippet)
    (yas-global-mode)

    (add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets")
  #+END_SRC

  Load and initialize plugins
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (require 'expand-region)
    (require 'multiple-cursors)
    (require 'smex)
    (smex-initialize)
    (ido-vertical-mode)
    (projectile-global-mode)
    (global-git-gutter-mode +1)
  #+END_SRC

  restclient
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (require 'restclient)
  #+END_SRC

  ace-jump-mode
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (require 'ace-jump-mode)
  #+END_SRC

  pretty mode
  #+BEGIN_SRC emacs-lisp
    (require 'pretty-mode)
    (global-pretty-mode)
  #+END_SRC

  ediff-mode
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    ;; Makes ediff operate on the selected-frame
    (setq ediff-window-setup-function 'ediff-setup-windows-plain)
  #+END_SRC

  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (add-hook 'after-init-hook #'global-flycheck-mode)
  #+END_SRC

** Python customizations

   Global variables
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     (setq python-shell-interpreter "ipython"
           python-shell-interpreter-args ""
           python-max-column 99)
   #+END_SRC

   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     (defun python-mode-initialize ()
       (interactive)
       (setq whitespace-line-column python-max-column
             fill-column python-max-column
             flycheck-flake8-maximum-line-length python-max-column)
       (highlight-lines-matching-regexp "i?pdb.set_trace()"))

     (add-hook 'python-mode-hook 'python-mode-initialize)
   #+END_SRC

** Groovy customizations

   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     (add-to-list 'auto-mode-alist '("\\.groovy\\'" . groovy-mode))
     (add-to-list 'auto-mode-alist '("\\.gsp\\'" . nxml-mode))
     (add-to-list 'auto-mode-alist '("\\.gradle$" . groovy-mode))
   #+END_SRC

** Emacs LISP customizations

   Rainbow mode
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     (add-hook 'emacs-lisp-mode-hook 'rainbow-delimiters-mode)
   #+END_SRC

* ERC customizations

  Remove ~join~, ~part~ and ~quit~ messages
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (setq erc-hide-list '("JOIN" "PART" "NICK" "MODE" "QUIT"))
  #+END_SRC

  Add inline image support
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (require 'erc-image)
    (add-to-list 'erc-modules 'image)
    (erc-update-modules)
  #+END_SRC

  Connect ~erc~ with libnotify
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (add-to-list 'erc-modules 'notifications)
  #+END_SRC

* Org customizations

  Todo keywords
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (setq org-todo-keywords '((sequence "TODO" "DONE")))
  #+END_SRC

  Org directory
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (setq org-directory "~/org")
  #+END_SRC

  Agenda customizations
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (load-library "find-lisp")
    (setq org-agenda-files (find-lisp-find-files org-directory "\.org$"))
  #+END_SRC

  Associate org-mode with =.org= files
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
  #+END_SRC

  Activate auto-fill-mode in org files
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (add-hook 'org-mode-hook 'auto-fill-mode)
  #+END_SRC

  Prettify
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (setq org-src-fontify-natively t)
    (setq org-html-inline-images t)
  #+END_SRC

** Org mobile

   Documentation [[http://orgmode.org/manual/MobileOrg.html][here]]
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     (setq org-mobile-directory "~/Dropbox/MobileOrg")
   #+END_SRC

   Files to be staged for MobileOrg
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     (setq org-mobile-files org-agenda-files)
   #+END_SRC

   Avoid creating id properties in the agenda files when pulling from
   MobileOrg[fn:1]
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     (setq org-mobile-force-id-on-agenda-items nil)
   #+END_SRC

** Org capture

   Where the notes will be saved ([[http://orgmode.org/manual/Capture.html][docs]])
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     (setq org-default-notes-file (concat org-directory "/notes.org"))
   #+END_SRC

   New templates
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     (setq org-capture-templates
           '(("t" "Todo" entry (file+headline (concat org-directory "/gtd.org") "Tasks")
              "* TODO %?\n %i\n %a")
             ("j" "Journal" entry (file+datetree (concat org-directory "/journal.org"))
              "* %?\nEntered on %U\n %i\n %a")))
   #+END_SRC

* Slime customizations

  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
;    (require 'slime)
  #+END_SRC

  Setting the REPL command
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (setq inferior-lisp-program "sbcl")
  #+END_SRC

* Multi-term customizations

  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (setq multi-term-program "/usr/bin/zsh")

    (setq term-bind-key-alist
          (list
           (cons "C-c C-j" 'term-line-mode)
           (cons "C-c C-k" 'term-char-mode)
           (cons "C-c C-c" 'term-interrupt-subjob)
           (cons "C-c C-z" 'term-stop-subjob)
           (cons "M-b" 'term-send-backward-word)))
  #+END_SRC

* Custom functions

** smart-beginning-of-line

   This function will be bound to =C-a=.
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     ; smart-beginning-of-line
     (defun smart-beginning-of-line ()
       "Move point to first non-whitespace character or beginning-of-line.

     Move point to the first non-whitespace character on this line.
     If point was already at that position, move point to beginning of line."
       (interactive)
       (let ((oldpos (point)))
         (back-to-indentation)
         (and (= oldpos (point))
              (beginning-of-line))))
   #+END_SRC

** insert-current-date

   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     ; insert-current-date
     (defun insert-current-date ()
       "Inserts the current date in yyyy-mm-dd format"
       (interactive)
       (insert (shell-command-to-string "echo -n `date +%Y-%m-%d`")))
   #+END_SRC

* Key bindings

  avoid sending emacs to sleep with C-z.
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (global-unset-key (kbd "C-z"))
  #+END_SRC

  If sleeping, emacs can be awekened with =SIGCONT=
  #+BEGIN_SRC shell-script
    killall -CONT emacs
    killall -CONT emacsclient
  #+END_SRC

  use smex with M-x
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (global-set-key (kbd "M-x") 'smex)
    (global-set-key (kbd "M-X") 'smex-major-mode-commands)
  #+END_SRC

  ibuffer with the default buffer list
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (global-set-key (kbd "C-x C-b") 'ibuffer)
  #+END_SRC

  smart-beginning-of-line
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (global-set-key (kbd "C-a") 'smart-beginning-of-line)
  #+END_SRC

  org-mode
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (global-set-key (kbd "C-c c") 'org-capture)
    (global-set-key (kbd "C-c a") 'org-agenda)
  #+END_SRC

  expand-region
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (global-set-key "\M-@" 'er/expand-region)
    (global-set-key "\M-#" 'er/contract-region)
  #+END_SRC

  multiple-cursors
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (global-set-key (kbd "C->") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
    (global-set-key (kbd "C-M->") 'mc/skip-to-next-like-this)
    (global-set-key (kbd "C-M-<") 'mc/skip-to-previous-like-this)
  #+END_SRC

  programming
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (global-set-key (kbd "C-c C-c") 'comment-or-uncomment-region)
  #+END_SRC

  magit
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (global-set-key (kbd "C-c m") 'magit-status)
  #+END_SRC

  ace-jump-mode
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (global-set-key (kbd "C-c SPC") 'ace-jump-mode)
  #+END_SRC

  mu4e
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (global-set-key (kbd "C-c em") 'mu4e)
    (global-set-key (kbd "C-c eu") 'mu4e-update-mail-and-index)
  #+END_SRC

** Chords

   First we need to activate =key-chord-mode=
   #+BEGIN_SRC emacs-lisp
     (require 'key-chord)
     (key-chord-mode 1)
   #+END_SRC

   Then we can define as many chords as we want:

   *window resize*
   #+BEGIN_SRC emacs-lisp
     (key-chord-define-global "rh" 'shrink-window-horizontally)
     (key-chord-define-global "rl" 'enlarge-window-horizontally)
     (key-chord-define-global "rj" 'shrink-window)
     (key-chord-define-global "rk" 'enlarge-window)
   #+END_SRC

* Auto-save and backup configuration

  auto-save
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (setq backup-directory-alist
          `((".*" . ,temporary-file-directory)))
    (setq auto-save-file-name-transforms
          `((".*" ,temporary-file-directory t)))
  #+END_SRC

  backup
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (setq backup-directory-alist `(("." . "~/.saves")))
  #+END_SRC

* Footnotes

[fn:1] [[http://orgmode.org/manual/Pushing-to-MobileOrg.html#fnd-2][Docs here]]
