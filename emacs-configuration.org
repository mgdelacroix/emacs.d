#+TITLE: Emacs configuration

* Cask

  First of all, load the =cask.el= file and initialize the module.

  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el :padline no :mkdirp yes
    (add-to-list 'load-path user-emacs-directory)
    
    (require 'cask "~/.cask/cask.el")
    (cask-initialize)
  #+END_SRC

* Encryption with PGP                                                 :crypt:
-----BEGIN PGP MESSAGE-----
Version: GnuPG v2.0.22 (GNU/Linux)

hQIOA50twMi6CP1pEAf/brLPRQ+97luUWBT9jL929n0m16OhAk52FT0L7dkSbJYr
xJl6eo8DriWWkiE6jfXp/yK4hd6aiKitpJvbGmoazOltIyQCvNnjyPsX5jK34iD6
6Xnh1taBx4pVLwE0xbKJnxnwGNAutlFzKM9VH3x7FO7Qhnfg7HjC2bqOFa8LDKX4
H4bxJwUcZTphlW/jvG9k8WBKKawzjSwDtLDoXctzl1grzdDTU8hy97hFrQPxED+q
3ZvySl2V7OW3Cnm9eGxNri1RipsrjOi94tnAhZBnqAZ8/B74xHOn+oNxZZmxSwtj
Cah/QsbofJOA8jUnMqLuL3HH6zoUkarQ4ygR8dF9jwgAr4VAwCTmBx08F/2YRi9T
EZAK1agmhIZPTjO1GxrtZtQmW6OfUPB5Gg/clblMcwHJWFLnARlYeSWoozDd0cJx
gtMT5yuSmoaNcepcwTJRq2xqqa/IMo6N+qkiFsMV43out69L6h7kvtxZQ5vesF7a
zYx8/YZFvKbwfcouWYNp9IyxHAbTt2thRjRlE0W+MpZXYZf5oQ15srrVOctHEfGN
PO3T7OD5y5fzrV4TzWXbxRGNarkiaQhiyvnDoGKsJWKY4+zgb/lG/nByINHevqF4
lIC0zy8SViSq7BTsK56vOUxj3SIQTq1ZsiliN9NuSBlvky1ZmUrGHsa53GyAF/A7
JNLAmQEbHEkLoLN+5Me+7Igw9E+cy4Cv+xf7jJaKrG+7FqyrpOpBC0cGkVzRkAdh
giUy6r6IrfRaBMEK91V1s+cJ9G13PCh/Mz6nE0yjSKQDWjxeerFd3di25P4fO/QA
eGUNK0sZYuNNXOLDEK1WOJlixW6WPYD/ETyl9pzB3KUSzJhHGxmuu99kt7Rr7QNA
s2QmE/pPIM1kMCxmUYTPYOYgMKfW0E7N4f0brWibtJGwOBWD6SXxp10ncBJQM2a7
SZ7fTlA9BcSCJHZddcq4O6jwOuj1DGNCH/YUMgITWEBoDQmO4nX9+mFMCskkWAOy
ISqulP2QG9KE6HfLTbYyu9/m459WFiwoeznP5l6eCGLi2wFkd+QYQxej9fY30jmD
ctUxNdA8ycpKbdDNlpsGjO4fvkpog7V+jkWQ3B9HfEhuFqyx2ggqOCKTAmkiPl2H
M+TO/dyHKyczehEZcg==
=msDB
-----END PGP MESSAGE-----

* Misc customizations

  Deactivate all the toolbars and menus
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (menu-bar-mode 0)
    (tool-bar-mode 0)
    (scroll-bar-mode 0)
  #+END_SRC

  Basic indentation
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (setq-default c-basic-offset 4)
  #+END_SRC

  Tabs configuration
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (setq-default indent-tabs-mode nil)
    (setq-default tab-width 4)  
  #+END_SRC

  Deactivate splash screen
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (setq inhibit-splash-screen t)
  #+END_SRC

  Theme
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (load-theme 'ujelly t)
  #+END_SRC

  Auto revert buffers when they change
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (setq global-auto-revert-mode t)
  #+END_SRC

* Programming customizations

  Ido-mode
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (setq ido-enable-flex-matching t)
    (setq ido-everywhere t)
    (ido-mode 1)
    (require 'ido-ubiquitous)
  #+END_SRC

  Load and initialize plugins
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (require 'expand-region)
    (require 'multiple-cursors)
    (require 'smex)
    (smex-initialize)
    (ido-vertical-mode)
    (projectile-global-mode)
    (global-git-gutter-mode +1)
  #+END_SRC

  ace-jump-mode
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (require 'ace-jump-mode)
  #+END_SRC

** Groovy customizations

   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     (add-to-list 'auto-mode-alist '("\\.groovy\\'" . groovy-mode))
     (add-to-list 'auto-mode-alist '("\\.gsp\\'" . nxml-mode))
     (setq auto-mode-alist (cons '("\\.gradle$" . groovy-mode) auto-mode-alist))
   #+END_SRC

* Org customizations

  Agenda customizations
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (load-library "find-lisp")
    (setq org-agenda-files (find-lisp-find-files "~/org" "\.org$"))  
  #+END_SRC

* Slime customizations

  Setting the REPL command
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (setq inferior-lisp-program "clisp")
  #+END_SRC

* Custom functions

** smart-beginning-of-line

   This function will be bound to =C-a=.
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     ; smart-beginning-of-line
     (defun smart-beginning-of-line ()
       "Move point to first non-whitespace character or beginning-of-line.
     
     Move point to the first non-whitespace character on this line.
     If point was already at that position, move point to beginning of line."
       (interactive)
       (let ((oldpos (point)))
         (back-to-indentation)
         (and (= oldpos (point))
              (beginning-of-line))))
   #+END_SRC

* Key bindings

  use smex with M-x
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (global-set-key (kbd "M-x") 'smex)
    (global-set-key (kbd "M-X") 'smex-major-mode-commands)  
  #+END_SRC

  smart-beginning-of-line
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (global-set-key (kbd "C-a") 'smart-beginning-of-line)  
  #+END_SRC

  org-mode
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (global-set-key (kbd "C-c c") 'org-capture)
    (global-set-key (kbd "C-c a") 'org-agenda)
  #+END_SRC

  expand-region
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (global-set-key "\M-@" 'er/expand-region)
    (global-set-key "\M-#" 'er/contract-region)  
  #+END_SRC

  multiple-cursors
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (global-set-key (kbd "C->") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
    (global-set-key (kbd "C-M->") 'mc/skip-to-next-like-this)
    (global-set-key (kbd "C-M-<") 'mc/skip-to-previous-like-this)  
  #+END_SRC

  programming
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (global-set-key (kbd "C-c C-c") 'comment-or-uncomment-region)  
  #+END_SRC

  magit
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (global-set-key (kbd "C-c m") 'magit-status)  
  #+END_SRC

  ace-jump-mode
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (global-set-key (kbd "C-c SPC") 'ace-jump-mode)
  #+END_SRC

* Auto-save and backup configuration

  auto-save
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (setq backup-directory-alist
          `((".*" . ,temporary-file-directory)))
    (setq auto-save-file-name-transforms
          `((".*" ,temporary-file-directory t)))  
  #+END_SRC

  backup
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (setq backup-directory-alist `(("." . "~/.saves")))
  #+END_SRC
