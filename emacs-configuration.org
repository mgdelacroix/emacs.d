#+TITLE: Emacs configuration

* Cask

  First of all, load the =cask.el= file and initialize the module.

  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el :padline no :mkdirp yes
    (add-to-list 'load-path user-emacs-directory)
    
    (require 'cask "~/.cask/cask.el")
    (cask-initialize)
  #+END_SRC

* Encryption with PGP                                                 :crypt:
-----BEGIN PGP MESSAGE-----
Version: GnuPG v2.0.22 (GNU/Linux)

hQIOA50twMi6CP1pEAf/R+KoQ5vwEnxWw9w/+U1aq9TiGJylNpQtArIPtljWAZ/+
/p0m76bSbrg3Zh624f533RsYCoKZGVVcvYHKqUhkgjWwRSY2L3I52hpNZJxvOLA5
K5AcJWGDfFmXt88ErqZZXoRCQSL9PaL7bE69USTDmLyeUEc9fv/+zzzBgILHGkSN
8bJMnHuHOYBmX1EVniPIeKnS37vfAP+3TKa3pTqLIdeUL98H0vieX/syepcNVLhR
p+T4x0UJAl2nBrb2AC0pVdYmdMOgeJgIPvDgEOChFvEjgAZjV1L0Ab/YZpWgV1NV
MJsYpktYgft4uk1XGvGgZh/lQ3J2COEMZwxEG1CsQQf9FVI8GjkoEWyZcTc6NRfe
MDPuP884nX/1GHvbfcAOz4hCx8om0ZFryJtscqChKF3o8WYQaq8+LsmGHWfI8o/K
w58U1cciN906kpvBVRoytXoqQc187oHw5RTyvS9pMVvQYvh0EdFxr6UvBhZ2763w
gh7ZH1IUB0m1ZmVUHmg4CGLK+Q2JdjBMVHDM48HXU/phTGcV0AsSdnRoE6yCS9p1
oG8XynJD+cHUY30iXcxiX6ezDDty1IlTGZ4yhrHxY/yXGusIZQe9CBGNE6Je/hfT
wJYc137meznuTahzo8iF0LYW6Uigd50JGvsP+ln+baHbnYDQgnD9yw+K1WBVNdUO
h9LAkgGCxuVfBl5dFqo0wkaJellwrw/aJNfLIlGRdImr4Sm0mIUSzmaEpSZ4zrir
F8wLuY2V/4hQaJAc3xwLog/si/VsziaWKavZ2RbrLo/iJJpT7WPgLaOiHC7ITKwn
wCIZIMjO9JHzRsdi454TCIwO+zBSwSlRuMttZSxP2/I+dk5lI6BnrAdCa5w3o9za
akTECmHA6HmWP5yVqIaViWFYv8hw2CFE0QHKNS8VpNK0u8nGhwnOdLvzovcoGDu2
pJ6wAlpvYGsZvF6z2dBwqj4DHZvkWoxrckzzXqfadqOBkQcphuBy/d35EA+pyg5Y
nLMs+IlMIlU9vL2lZznAFHhRAtDntiLDRTDOf2oBpFRFPW4hWQWT98Z1FXQJK/9a
TSd/FqcElt/M5H/nAEB9sVqTGwcir549G++y1H3h3wbhKtPHu1M+vgEMkApNmKPc
3kZcWCPL
=IU0x
-----END PGP MESSAGE-----

* Misc customizations

  Deactivate all the toolbars and menus
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (menu-bar-mode 0)
    (tool-bar-mode 0)
    (scroll-bar-mode 0)
  #+END_SRC

  Column number
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (setq column-number-mode t)
  #+END_SRC

  Rayas en la franja izquierda cuando no hay más líneas en el buffer
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (toggle-indicate-empty-lines)
    (fringe-mode '(4 . 0))
  #+END_SRC

  We want to delete selected stuff when writting
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (delete-selection-mode)
  #+END_SRC

  Limit words depending on camel-case
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (global-subword-mode)
  #+END_SRC

  Basic indentation
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (setq-default c-basic-offset 4)
  #+END_SRC

  Tabs configuration
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (setq-default indent-tabs-mode nil)
    (setq-default tab-width 4)  
  #+END_SRC

  Deactivate splash screen
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (setq inhibit-splash-screen t)
  #+END_SRC

  Theme
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (load-theme 'ujelly t)
  #+END_SRC

  Auto revert buffers when they change
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (setq global-auto-revert-mode t)
    (setq global-auto-revert-non-file-buffers t)
    (setq auto-revert-verbose nil)
  #+END_SRC

  Force case matching when using /dabbrev-expand/
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (setq dabbrev-case-fold-search nil)
  #+END_SRC

* Mail with mu4e

** Configuration

   Misc customizations
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     ;; Customizations
     (setq mu4e-confirm-quit nil)

     ;; Appearance
     (setq mu4e-use-fancy-chars t)

     ;; Show images
     (setq mu4e-view-show-images t)
     (when (fboundp 'imagemagick-register-types)
       (imagemagick-register-types))
   #+END_SRC

   Mail retrieval
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     (setq mu4e-update-interval 120)
   #+END_SRC

   Kill buffer on exit
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
      (setq message-kill-buffer-on-exit t)
   #+END_SRC

* Programming customizations

  Ido-mode
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (setq ido-enable-flex-matching t)
    (setq ido-everywhere t)
    (ido-mode 1)
    (require 'ido-ubiquitous)
    (ido-at-point-mode)
  #+END_SRC

  SmartParens
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (smartparens-global-mode)
  #+END_SRC

  yasnippets
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (require 'yasnippet)
    (yas-global-mode)
    
    (add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets")
  #+END_SRC

  Load and initialize plugins
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (require 'expand-region)
    (require 'multiple-cursors)
    (require 'smex)
    (smex-initialize)
    (ido-vertical-mode)
    (projectile-global-mode)
    (global-git-gutter-mode +1)
  #+END_SRC

  ace-jump-mode
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (require 'ace-jump-mode)
  #+END_SRC

  pretty mode
  #+BEGIN_SRC emacs-lisp
    (require 'pretty-mode)
    (global-pretty-mode)
  #+END_SRC

  ediff-mode
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    ;; Makes ediff operate on the selected-frame
    (setq ediff-window-setup-function 'ediff-setup-windows-plain)
  #+END_SRC

** Groovy customizations

   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     (add-to-list 'auto-mode-alist '("\\.groovy\\'" . groovy-mode))
     (add-to-list 'auto-mode-alist '("\\.gsp\\'" . nxml-mode))
     (add-to-list 'auto-mode-alist '("\\.gradle$" . groovy-mode))
   #+END_SRC

** Emacs LISP customizations

   Rainbow mode
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     (add-hook 'emacs-lisp-mode-hook 'rainbow-delimiters-mode)
   #+END_SRC

* ERC customizations                                                  :crypt:
-----BEGIN PGP MESSAGE-----
Version: GnuPG v2.0.22 (GNU/Linux)

hQIOA50twMi6CP1pEAf9GXdPTUEtmrmgcn/s8IVYP+TJXfEkUhCwhskCvKIdsksp
NYT90MB2ycg6kgTiZ3zOTeYpLv+q53cCWfoCKEMpnPu8XMxV75jUZ5KsT4hkcgYE
mvJ2xsxZ2pnh8+ird+LTaZBLvJ4pvsl2T5WfxBfmNj1gSmrN4llM774UKDqlqw6C
O+yKYlS9TQ0J2XL2Nqav1x27Jhtab7O+2bdYYNhF1M51hluJJUzY+/9qIs8Chyue
wbp78zwvykRH5gKpGuSJgl+UbLWbvHeGm1lG/+hNTWRFd2uGFDgDfuqKcMIizqSm
lI8JN2uFy6YVl5RvPx1rQMmu2ANY1eUTQejSRtjhDQf8DBcmx38CcLFwzgITKqwT
EU+Im9Qzg2AkpfUjwr9roxfgXaO0g4C096EzfVyHHJ1BHi4buJ23bJldZnQ2vQss
QCBGS21G/khep0Ndz5dUN3Wz+/eifxYXKwWUIzsSD0qcDSPe8EcxBe2+OYBm4bXq
dqZWlPbwKwMYKjJJnDPt0nhRTnPRSPyyrIdf5YSeymAHVahm6M0F/d0GYUjfBMB7
9XrKMKjN/JkfF6WXIUcUvgJFS3ymBTB8YM8Hph2CqrBLv3kvwj+cNp025nGUV60o
DvYHLrEhpObefhaSvr8pW6YBCEBWCZtTbWdYgE2DxZTx+0tkA3JA9g5OON5Z+nU3
BtLAogFeH1ECwtMMhr0bioAEDcvoa1NLMxADILJeAV4Ol54Z4iIUp6tv5eBDua5d
7dXQnYsMgvzRZ4au8whIBO5oszI3orq/UixeJ3DwipLyilqmckRTnh9gJqebXE50
CJS0F/4FKiwmFtgmTTSTtX74XL4z/4FUlggiywuLbjoOQa3MoZ0KwZP35tdNF1fp
BRlvvJYSHb2iZ38KuVatFiqJiuAZVEgReEk3EFvoQ+Ew34RzZUYcZc/SFE33tSAO
rTPEG732a8vq/9+M/JUn7zKEOvKCp0lCWP/8svzfgHmE4cNfPRnAxxBUtrRrxu0g
mpwQG3gmD/X6qJQ2yaBW0PrKnyjUkKj37ZEfrqw0W+44PYt7lJwuDL4Bep2psN5k
Jdl6tgMT5iG7tv7qVnsloSjbV9iJkKujz9ZE7VNyYg8U/kzSAZjJzDLIoMuz3YKq
WtEFPItFjD8i32IXAYllylDdaNyhag==
=roiq
-----END PGP MESSAGE-----

* Org customizations

  Agenda customizations
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (load-library "find-lisp")
    (setq org-agenda-files (find-lisp-find-files "~/org" "\.org$"))  
  #+END_SRC

  Associate org-mode with =.org= files
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
  #+END_SRC

  Activate auto-fill-mode in org files
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (add-hook 'org-mode-hook 'auto-fill-mode)
  #+END_SRC

  Prettify
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (setq org-src-fontify-natively t)
    (setq org-html-inline-images t)
  #+END_SRC

* Slime customizations

  Setting the REPL command
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (setq inferior-lisp-program "clisp")
  #+END_SRC

* Multi-term customizations

  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (setq multi-term-program "/usr/bin/zsh")
    
    (setq term-bind-key-alist
          (list
           (cons "C-c C-j" 'term-line-mode)
           (cons "C-c C-k" 'term-char-mode)
           (cons "C-c C-c" 'term-interrupt-subjob)
           (cons "C-c C-z" 'term-stop-subjob)
           (cons "M-b" 'term-send-backward-word)))
  #+END_SRC

* Custom functions

** smart-beginning-of-line

   This function will be bound to =C-a=.
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     ; smart-beginning-of-line
     (defun smart-beginning-of-line ()
       "Move point to first non-whitespace character or beginning-of-line.
     
     Move point to the first non-whitespace character on this line.
     If point was already at that position, move point to beginning of line."
       (interactive)
       (let ((oldpos (point)))
         (back-to-indentation)
         (and (= oldpos (point))
              (beginning-of-line))))
   #+END_SRC

* Key bindings

  avoid sending emacs to sleep with C-z.
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (global-unset-key (kbd "C-z"))
  #+END_SRC

  If sleeping, emacs can be awekened with =SIGCONT=
  #+BEGIN_SRC shell-script
    killall -CONT emacs
    killall -CONT emacsclient
  #+END_SRC

  use smex with M-x
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (global-set-key (kbd "M-x") 'smex)
    (global-set-key (kbd "M-X") 'smex-major-mode-commands)  
  #+END_SRC

  ibuffer with the default buffer list
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (global-set-key (kbd "C-x C-b") 'ibuffer)
  #+END_SRC

  smart-beginning-of-line
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (global-set-key (kbd "C-a") 'smart-beginning-of-line)  
  #+END_SRC

  org-mode
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (global-set-key (kbd "C-c c") 'org-capture)
    (global-set-key (kbd "C-c a") 'org-agenda)
  #+END_SRC

  expand-region
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (global-set-key "\M-@" 'er/expand-region)
    (global-set-key "\M-#" 'er/contract-region)  
  #+END_SRC

  multiple-cursors
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (global-set-key (kbd "C->") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
    (global-set-key (kbd "C-M->") 'mc/skip-to-next-like-this)
    (global-set-key (kbd "C-M-<") 'mc/skip-to-previous-like-this)  
  #+END_SRC

  programming
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (global-set-key (kbd "C-c C-c") 'comment-or-uncomment-region)  
  #+END_SRC

  magit
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (global-set-key (kbd "C-c m") 'magit-status)  
  #+END_SRC

  ace-jump-mode
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (global-set-key (kbd "C-c SPC") 'ace-jump-mode)
  #+END_SRC

  mu4e
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (global-set-key (kbd "C-c em") 'mu4e)
    (global-set-key (kbd "C-c eu") 'mu4e-update-mail-and-index)
  #+END_SRC

** Chords

   First we need to activate =key-chord-mode=
   #+BEGIN_SRC emacs-lisp
     (require 'key-chord)
     (key-chord-mode 1)
   #+END_SRC

   Then we can define as many chords as we want:

   *window resize*
   #+BEGIN_SRC emacs-lisp
     (key-chord-define-global "rh" 'shrink-window-horizontally)
     (key-chord-define-global "rl" 'enlarge-window-horizontally)
     (key-chord-define-global "rj" 'shrink-window)
     (key-chord-define-global "rk" 'enlarge-window)
   #+END_SRC

* Auto-save and backup configuration

  auto-save
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (setq backup-directory-alist
          `((".*" . ,temporary-file-directory)))
    (setq auto-save-file-name-transforms
          `((".*" ,temporary-file-directory t)))  
  #+END_SRC

  backup
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (setq backup-directory-alist `(("." . "~/.saves")))
  #+END_SRC
